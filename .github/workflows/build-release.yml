name: Build and publish release

# cron format:
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6)
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ │
#'* * * * *'
# Build on Mondays at 01:30 UTC
on:
  schedule:
    - cron: '30 1 * * MON'
  workflow_dispatch:

env:
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

jobs:

  release-data:
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.release-data.outputs.upload_url }}

    # The tag name is vYYYY.MM.DD.hhmm to create simple, easy-to-read "rolling release" versioning
    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=$(date +v%Y.%-m.%-d.%-H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y.%-m.%-d.%-H%M)" >> $GITHUB_ENV

      - name: create release data
        # output is 'upload_url'
        id: release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Build auto weekly release - Published full release
          # create published
          draft: false
          # create a full release, not a pre-release
          prerelease: false

  linux:
    runs-on: ubuntu-18.04  # build on the oldest supported LTS so that resulting binaries are compatible with older and newer Linux releases
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: update version
        run: |
          ./scripts/version.sh $(date +%Y.%-m.%-d.%-H%M)

      - name: install appimage dependencies
        run: |
          sudo apt update && sudo apt install -y libfuse2
          sudo wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O /usr/local/bin/linuxdeploy-x86_64.AppImage
          sudo chmod +x /usr/local/bin/linuxdeploy-x86_64.AppImage
          sudo wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage -O /usr/local/bin/linuxdeploy-plugin-qt-x86_64.AppImage
          sudo chmod +x /usr/local/bin/linuxdeploy-plugin-qt-x86_64.AppImage

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: build Seamly2D appimage
        env:
          OUTPUT: Seamly2D-x86_64.AppImage
        run: |
          qmake -config release CONFIG+=noTests
          make -j$(nproc)
          make INSTALL_ROOT=`pwd`/AppDir install
          # install poppler-utils for pdftops, gstreamer1.0-plugins-base for QtMultimedia
          sudo apt update && sudo apt install -y poppler-utils gstreamer1.0-plugins-base
          cp /usr/bin/pdftops AppDir/usr/bin
          linuxdeploy-x86_64.AppImage --appdir AppDir --desktop-file=dist/seamly2d.desktop --plugin qt --output appimage

      - name: upload file as release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream

  macos:
    runs-on: macos-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: update version
        run: |
          ./scripts/version.sh $(date +%Y.%-m.%-d.%-H%M)

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make Seamly2D for macos
        run: |
          qmake Seamly2D.pro -config release CONFIG+=noTests
          make -j$(sysctl -n hw.logicalcpu)

      - name: upload Seamly2D-macos.zip as pre-release to Github Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./out/Seamly2D-macos.zip
          asset_name: Seamly2D-macos.zip
          asset_content_type: application/zip

  windows:
    runs-on: windows-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: update version
        shell: bash
        run: |
          ./scripts/version.sh $(date +%Y.%-m.%-d.%-H%M)

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # use Visual C++ 2022 latest, 14.34.xxxx
          toolset: '14.34'

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -config release CONFIG+=noTests
          nmake

      - name: create seamly2d-installer.exe
        # copy seamly2d and seamlyme directory trees prepared by windeployqt and create installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Copy-Item -Path 'src\app\seamly2d\bin\*' -Destination ..\windows-build -Recurse
          Copy-Item -Path 'src\app\seamlyme\bin\*' -Destination ..\windows-build -Recurse -Force
          Copy-Item -Path dist\seamly2d-installer.nsi -Destination ..\windows-build
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      - name: pack installer file into .zip
        run: |
          cd ..\windows-build\
          C:\"Program Files"\7-Zip\7z.exe a Seamly2D-windows.zip Seamly2D-installer.exe

      - name: upload unsigned Seamly2D-windows.zip as release to Github Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/Seamly2D-windows.zip
          asset_name: Seamly2D-windows.zip
          asset_content_type: application/zip

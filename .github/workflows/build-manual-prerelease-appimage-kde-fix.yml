name: Build manual linux appimage - test

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'debug'
      tags:
        description: 'Build manual Linux AppImage - Test'

env:
  QT_SELECT: 5
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

# The tag name is Test-weekly-YYmmdd-HHMM to enable multiple tests per day
jobs:

  release-data:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create-release-data.outputs.upload_url }}

    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=Test-manual-`date +"%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=Test manual `date +"%F%H%M"`" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release data
        id: create-release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Manual test of linux appimage build, creates pre-release
          draft: false
          prerelease: true

  linux:
    runs-on: ubuntu-20.04
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v2.4.2

      - name: install kde and build dependencies
        run: |  
          # begin software install
          sudo apt update 
          sudo apt install -y debsig-verify
          
          # *********************************
          # register kde neon repository
          
          # option 1 - original, no longer works because public.key no longer exists
          #echo 'deb http://archive.neon.kde.org/user focal main' | sudo tee /etc/apt/sources.list.d/neon.list
          #curl https://origin.archive.neon.kde.org/public.key -o - | sudo apt-key add -  
          
          # option 2 - search the keyserver to get kde key, add to keyring with gpg
          echo 'deb http://archive.neon.kde.org/user focal main' | sudo tee /etc/apt/sources.list.d/neon.list
          curl -sL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search="neon"' | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/neon-release.gpg --import
          sudo chmod 644 /etc/apt/trusted.gpg.d/neon-release.gpg   
          
          # *********************************
          
          # install build dependencies  
          sudo apt install -y build-essential gettext git qt5-default qttools5-dev libqt5svg5-dev libqt5xmlpatterns5-dev
          sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
        
      - name: build
        run: |
          sudo rm -rf ./AppDir || true
          sudo mkdir -v ./AppDir
          qmake PREFIX=./AppDir Seamly2D.pro -r CONFIG+=no_ccache
          make -j$(nproc) && make install
          sudo mkdir -p ./AppDir/usr/share/translations
          sudo mkdir -p ./AppDir/usr/share/applications
          sudo mkdir -p ./AppDir/usr/share/icons/hicolor/64x64/apps
          sudo mkdir -p ./AppDir/usr/share/icons/hicolor/256x256
          
          # where are those pesky .rcc files?
          pwd && find . -type f -regex ".*\.rcc" && ls ./AppDir/usr/share/diagrams.rcc
          
          # copy measurement diagrams (qt's .rcc resource file) into $build/share directory
          echo "copy measurement diagrams"
          cp src/app/seamlyme/bin/diagrams.rcc ./AppDir/usr/share
          ls ./AppDir/usr/share/diagrams.rcc
          
          # copy translations (qt's .qm translation files) into $build/share/translations directory
          echo "copy translation files"
          cp share/translations/*.qm AppDir/usr/share/translations
          
          # copy .desktop files from $build/dist directory to $build/share/applications directory
          echo "copy .desktop files"
          cp dist/seamly2d.desktop AppDir/usr/share/applications
          cp dist/seamlyme.desktop AppDir/usr/share/applications
          
           # copy icons to the correct directories
          echo "copy icon files"
          cp dist/seamly2d.png AppDir/usr/share/icons/hicolor/64x64/apps/
          cp share/img/Seamly2D_logo_256x256.png AppDir/usr/share/icons/hicolor/256x256/seamly2d.png      
        
      - name: build Seamly2D appimage
        # uses parameters from appimage-builder-recipe.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          #sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          appimage-builder --recipe dist/appimage-builder-recipe-test.yml --log DEBUG --generate --skip-test

      - name: copy to final file tag_name
        run: |
          sudo mv ./Seamly2D-continuous-x86_64.AppImage ./Seamly2D-x86_64.AppImage

      - name: upload seamly2d-x86_64.tar.gz artifact
        # uploads ./Seamly2D-x86_64.AppImage as artifact to Github Workflows
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Seamly2D-x86_64.AppImage
          path: './*AppImage*'

      - name: find file path
        id: path-lister
        uses: Rishabh510/Path-lister-action@1.0
        with:
          path: "."
          type: ".AppImage"

      - name: show file path
        run: |
          pwd
          echo "Found ${{ steps.path-lister.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.path-lister.outputs.paths }}; do
          echo $i
          done

      - name: upload file as pre-release
        # uploads seamly2d-x86_64.tar.gz as pre-release to Github Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: ./Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream

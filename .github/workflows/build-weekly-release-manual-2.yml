# This manual build file is the sandbox for ..
#   testing changes to the automated build-weekly-release.yml file.
# When your updates to this file run without error ..
#   incorporate your changes to build-weekly-release.yml.
# Create a pull request for your updates to all build files ..
#   whether for manual or automated build files.
# You can merge your own PR for updates to build Files ..
#   because you can't test then until they're fully merged ..
#   if the build fails immediately undo your work with a new PR & merge :D

name: Build weekly release - manual - 2

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Build weekly release - manual - 2'

env:
  QT_SELECT: 5

  # When changing the version information in this file be sure to change it in
  # pull-request.yml as well
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

# The tag name is Test-weekly-YYmmdd-HHMM to enable multiple tests per day
jobs:

  create-release:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: generate release name and tag
        run: |
          echo "TAG_NAME=Test-weekly-`date +"%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=Test weekly `date +"%F%H%M"`" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # there is no way to create a shared environment variable between jobs
      # as such we'll use the needs.JOB_NAME.outputs functionality to read
      # the upload_url output exposed by the create-release action
      - uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: This is a manual test of the automated weekly release function

  linux:
    runs-on: ubuntu-20.04
    needs: create-release
    env:
      UPLOAD_URL: "${{ needs.create-release.outputs.upload_url }}"

    steps:
      - uses: actions/checkout@v2.3.5
      - name: Install Qt5
        run: |
          # register kde neon repository
          echo 'deb http://archive.neon.kde.org/user focal main' | sudo tee /etc/apt/sources.list.d/neon.list
          curl https://origin.archive.neon.kde.org/public.key -o - | sudo apt-key add -

          # install build dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential gettext git qt5-default qttools5-dev libqt5svg5-dev libqt5xmlpatterns5-dev
          sudo apt-get install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

      - name: build
        run: |
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v0.8.8/appimage-builder-0.8.8-4e7c15f-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          appimage-builder --recipe dist/appimage-builder-recipe.yml --skip-test
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: seamly2d-x86_64-appimage.zip
          path: './*.AppImage*'

      - name: upload Seamly2D.AppImage
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D.AppImage
          asset_name: Seamly2D.AppImage
          asset_content_type: application/octet-stream

  macos:
    runs-on: macos-latest
    needs: create-release
    env:
      UPLOAD_URL: "${{ needs.create-release.outputs.upload_url }}"

    steps:
      - uses: actions/checkout@v2.3.5
      - uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: build
        run: |
          qmake Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          make
      - name: build dmg packages
        run: |
          hdiutil create -fs HFS+ -srcfolder src/app/seamly2d/bin/Seamly2D.app -volname "Seamly2D" Seamly2D.dmg
          hdiutil create -fs HFS+ -srcfolder src/app/seamlyme/bin/seamlyme.app -volname "SeamlyME" SeamlyME.dmg
      - name: pack package files into .zip
        run: |
          zip Seamly2D.zip Seamly2D.dmg SeamlyME.dmg
      - name: upload Seamly2D.zip
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D.zip
          asset_name: Seamly2D.zip
          asset_content_type: application/zip

  windows:
    runs-on: windows-latest
    needs: create-release
    env:
      UPLOAD_URL: "${{ needs.create-release.outputs.upload_url }}"

    steps:
      - uses: actions/checkout@v2.3.5
      - uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          toolset: '14.16.27023'
      - uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: build
        run: |
          qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          nmake
      - name: bundle VC_redist, OpenSSL dlls, and create + code sign installer
        run: |
          mkdir ..\windows-build
          Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item $_.FullName -force -destination ..\windows-build }
          windeployqt.exe --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamly2d.exe
          windeployqt.exe --force --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamlyme.exe
          copy .\dist\seamly2d-installer.nsi ..\windows-build\
          copy .\dist\win\VC_redist.x86.exe ..\windows-build\
          copy .\dist\win\VC_redist.x64.exe ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\
          New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null
          Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse
          Copy-Item 'src\app\seamlyme\bin\diagrams.rcc' '..\windows-build'
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi
          echo "${{ secrets.PFX_BASE64 }}" > cert.pfx.base64
          certutil -decode cert.pfx.base64 cert.pfx
          & 'C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe' sign /f cert.pfx /p ${{ secrets.PFX_PASSWORD }}  /fd sha256 /tr http://timestamp.comodoca.com/?td=sha256 /td sha256 /as /debug .\seamly2d-installer.exe
      - name: upload seamly2d-installer
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/seamly2d-installer.exe
          asset_name: seamly2d-installer.exe
          asset_content_type: application/octet-stream
